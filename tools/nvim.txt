
███╗░░██╗██╗░░░██╗██╗███╗░░░███╗
████╗░██║██║░░░██║██║████╗░████║
██╔██╗██║╚██╗░██╔╝██║██╔████╔██║
██║╚████║░╚████╔╝░██║██║╚██╔╝██║
██║░╚███║░░╚██╔╝░░██║██║░╚═╝░██║
╚═╝░░╚══╝░░░╚═╝░░░╚═╝╚═╝░░░░░╚═╝

____________________     _____________________

----------------   INSTALLATION
____________________     _____________________    

_______________________

-- NVIM INSTALACION
_______________________

sudo apt update
sudo apt install neovim -y		//por si no lo tienes

cd ~/.config
mkdir nvim
cd nvim

nano init.lua
------------------------------------------------------------------------------------
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"  -- Ruta de instalación de lazy.nvim
if not (vim.uv or vim.loop).fs_stat(lazypath) then            -- Verifica si no está instalado
  vim.fn.system({                                             -- Clona el repositorio si falta
    "git",
    "clone",
    "--filter=blob:none",                                     -- Optimiza la descarga
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",                                        -- Usa la versión estable
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)                                 -- Añade al inicio del runtimepath

require("lazy").setup("plugins")                              -- Inicializa lazy.nvim con plugins
require("vim-options")                                        -- Carga configuraciones básicas
---------------------------------------------------------------------------------------

nano init.vim.restored
---------------------------------------------------------------------------------------
-- Configuraciones básicas
vim.opt.number = true            -- Activa números de línea
vim.opt.relativenumber = true    -- Números relativos (distancia desde cursor)
vim.opt.mouse = "a"              -- Soporte completo para mouse
vim.opt.syntax = "enable"        -- Resaltado de sintaxis
vim.opt.showcmd = true           -- Muestra comandos parciales
vim.opt.encoding = "utf-8"       -- Codificación UTF-8 por defecto
vim.opt.showmatch = true         -- Resalta pares de brackets/parentesis

-- Configuración de tabulación
vim.opt.expandtab = true         -- Convierte tabs a espacios
vim.opt.tabstop = 4              -- Ancho visual de un tab
vim.opt.shiftwidth = 4           -- Espacios para autoindentado
vim.opt.softtabstop = 4          -- Espacios al presionar TAB
vim.opt.autoindent = true        -- Hereda indentación línea anterior
vim.opt.smarttab = true          -- TAB inteligente según contexto

-- Plugins con Lazy.nvim
require("lazy").setup({
    -- Barra de estado inferior
    { "nvim-lualine/lualine.nvim" },
    -- Iconos para archivos/plugins
    { "nvim-tree/nvim-web-devicons" },
    -- Tema Onedark (estilo Atom)
    { "navarasu/onedark.nvim" },
    -- Tema Catppuccin (colores pastel)
    { "catppuccin/nvim", name = "catppuccin" }
})

-- Aplicar tema de colores
vim.cmd("colorscheme onedark")

-- Configurar barra de estado
require("lualine").setup({
    options = {
        icons_enabled = true,    -- Mostrar iconos
        theme = "material"       -- Tema visual
    }
})

-- Personalizar tema Onedark
require("onedark").setup({
    style = "dark",             -- Variante oscura
    transparent = true          -- Fondo transparente
})

-- Cargar configuración del tema
require("onedark").load()
--------------------------------------------------------------------------------
mkdir lua
cd lua

nano plugins.lua
---------------------------------------------------------------------------------
return {
  -- Pantalla de inicio personalizada (dashboard)
  {
    "goolord/alpha-nvim",
    config = function()
      require("alpha").setup(require("alpha.themes.startify").config)
    end
  },

  -- Tema de colores Catppuccin (4 variantes disponibles)
  {
    "catppuccin/nvim",
    name = "catppuccin",
    priority = 1000,  -- Carga primero para evitar parpadeo
    config = function()
      require("catppuccin").setup({
        flavour = "mocha",  -- Versión oscura con tonos azules
      })
      vim.cmd.colorscheme "catppuccin"  -- Aplicar tema
    end
  },

  -- Configuración del servidor LSP (Language Server Protocol)
  {
    "neovim/nvim-lspconfig",
    config = function()
      require("lspconfig").ts_ls.setup({})  -- Servidor para TypeScript
    end
  },

  -- Barra de estado inferior con iconos
  {
    "nvim-lualine/lualine.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },  -- Requiere iconos
    config = function()
      require("lualine").setup()
    end
  },

  -- Explorador de archivos moderno (alternativa a NERDTree)
  {
    "nvim-neo-tree/neo-tree.nvim",
    branch = "v3.x",  -- Usa la versión estable v3
    dependencies = {
      "nvim-lua/plenary.nvim",  -- Funciones útiles de Lua
      "nvim-tree/nvim-web-devicons",  -- Iconos
      "MunifTanjim/nui.nvim"  -- UI components
    },
    config = function()
      require("neo-tree").setup()
    end
  },

  -- Búsqueda fuzzy para archivos, texto, etc.
  {
    "nvim-telescope/telescope.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },  -- Requiere plenary
    config = function()
      require("telescope").setup()
    end
  },

  -- Mejor resaltado de sintaxis y análisis de código
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",  -- Comando para actualizar parsers
    config = function()
      require("nvim-treesitter.configs").setup({
        ensure_installed = { "lua", "javascript", "typescript", "python" },  -- Lenguajes a instalar
        highlight = { enable = true },  -- Resaltado mejorado
        indent = { enable = true },  -- Indentación automática
      })
    end
  }
}

--------------------------------------------------------------------------------------------

nano vim-options.lua
--------------------------------------------------------------------------------------------
-- Configuración de Neovim con comandos VimScript encapsulados en vim.cmd()

-- Mostrar números de línea absolutos
vim.cmd("set number")

-- Habilitar soporte de mouse en todos los modos (a=all)
vim.cmd("set mouse=a")

-- Activar resaltado de sintaxis
vim.cmd("syntax enable")

-- Mostrar comandos parciales en la barra de estado
vim.cmd("set showcmd")

-- Usar codificación UTF-8 para caracteres especiales
vim.cmd("set encoding=utf-8")

-- Resaltar paréntesis/brackets coincidentes
vim.cmd("set showmatch")

-- Mostrar números de línea relativos al cursor
vim.cmd("set relativenumber")

-- Configuración de indentación/tabulación:

-- Convertir tabs a espacios
vim.cmd("set expandtab")

-- Un tab equivale a 4 espacios
vim.cmd("set tabstop=4")

-- Usar mismo valor que tabstop (0=desactivar)
vim.cmd("set shiftwidth=0")

-- Usar mismo valor que tabstop (0=desactivar)
vim.cmd("set softtabstop=0")

-- Mantener indentación en nuevas líneas
vim.cmd("set autoindent")

-- Tabs inteligentes según contexto
vim.cmd("set smarttab")

-- Mapeos de teclado personalizados:

-- Movimiento entre ventanas con Ctrl+h (izquierda)
vim.keymap.set('n', '<C-h>', '<C-w>h', {})

-- Movimiento entre ventanas con Ctrl+l (derecha)
vim.keymap.set('n', '<C-l>', '<C-w>l', {})

---------------------------------------------------------------------------------------------

mkdir plugins
cd plugins

nano alpha.lua
---------------------------------------------------------------------------------------------
-- Configuración de Neovim con comandos VimScript encapsulados en vim.cmd()

-- Mostrar números de línea absolutos
vim.cmd("set number")

-- Habilitar soporte de mouse en todos los modos (a=all)
vim.cmd("set mouse=a")

-- Activar resaltado de sintaxis
vim.cmd("syntax enable")

-- Mostrar comandos parciales en la barra de estado
vim.cmd("set showcmd")

-- Usar codificación UTF-8 para caracteres especiales
vim.cmd("set encoding=utf-8")

-- Resaltar paréntesis/brackets coincidentes
vim.cmd("set showmatch")

-- Mostrar números de línea relativos al cursor
vim.cmd("set relativenumber")

-- Configuración de indentación/tabulación:

-- Convertir tabs a espacios
vim.cmd("set expandtab")

-- Un tab equivale a 4 espacios
vim.cmd("set tabstop=4")

-- Usar mismo valor que tabstop (0=desactivar)
vim.cmd("set shiftwidth=0")

-- Usar mismo valor que tabstop (0=desactivar)
vim.cmd("set softtabstop=0")

-- Mantener indentación en nuevas líneas
vim.cmd("set autoindent")

-- Tabs inteligentes según contexto
vim.cmd("set smarttab")

-- Mapeos de teclado personalizados:

-- Movimiento entre ventanas con Ctrl+h (izquierda)
vim.keymap.set('n', '<C-h>', '<C-w>h', {})

-- Movimiento entre ventanas con Ctrl+l (derecha)
vim.keymap.set('n', '<C-l>', '<C-w>l', {})

------------------------------------------------------------------------------------------------------------

nano catppuccin.lua
------------------------------------------------------------------------------------------------------------
return {
    -- Plugin: Tema Catppuccin (versiones: latte, frappe, macchiato, mocha)
    "catppuccin/nvim",
    lazy = false,           -- Cargar inmediatamente al iniciar (no lazy load)
    name = "catppuccin",    -- Nombre del plugin (opcional pero recomendado)
    priority = 1000,        -- Máxima prioridad (evita parpadeo al cargar)
    
    -- Función de configuración que se ejecuta después de cargar el plugin
    config = function()
        require("catppuccin").setup({
            transparent_background = true,  -- Activar fondo transparente
        })
        -- Aplicar el tema inmediatamente después de configurarlo
        vim.cmd.colorscheme "catppuccin"
    end
}
-------------------------------------------------------------------------------------------------------------

nano lsp-config.lua
-------------------------------------------------------------------------------------------------------------
return {
    -- Mason: Gestor de servidores LSP, linters y formateadores
    {
        "williamboman/mason.nvim",
        config = function()
            require("mason").setup()  -- Configuración básica de Mason
        end
    },

    -- Mason-LSPConfig: Integración entre Mason y LSPConfig
    {
        "williamboman/mason-lspconfig.nvim",
        config = function()
            require("mason-lspconfig").setup({
                -- Lista de servidores LSP para instalar automáticamente:
                ensure_installed = {
                    "lua_ls",    -- Lua
                    "clangd",    -- C/C++
                    "cmake",     -- CMake
                    "cssls",     -- CSS
                    "html"      -- HTML
                }
            })
        end
    },

    -- Configuración nativa de LSP para Neovim
    {
        "neovim/nvim-lspconfig",
        config = function()
            local lspconfig = require("lspconfig")
            -- Configuración específica para LuaLS
            lspconfig.lua_ls.setup({})
            
            -- Mapeo de teclas: Muestra documentación flotante
            vim.keymap.set('n', 'K', vim.lsp.buf.hover, {})
        end
    }
}
-------------------------------------------------------------------------------------------------

nano lualine.lua
-------------------------------------------------------------------------------------------------
return {
    -- Plugin: Lualine (barra de estado personalizable)
    'nvim-lualine/lualine.nvim',
    
    -- Función de configuración que se ejecuta al cargar el plugin
    config = function()
        require('lualine').setup({
            options = {
                theme = 'dracula'  -- Usa el esquema de colores Dracula
            }
            -- Nota: Podrías añadir más configuraciones aquí como:
            -- sections = { ... },  -- Para personalizar las secciones
            -- extensions = { ... } -- Para integración con otros plugins
        })
    end
}
--------------------------------------------------------------------------------------------------

nano neo-tree.lua
--------------------------------------------------------------------------------------------------
return {
    -- Plugin: Neo-tree (explorador de archivos moderno)
    "nvim-neo-tree/neo-tree.nvim",
    branch = "v3.x",  -- Usa la rama estable v3.x del plugin
    
    -- Dependencias requeridas:
    dependencies = {
        "nvim-lua/plenary.nvim",      -- Biblioteca de funciones Lua útiles
        "nvim-tree/nvim-web-devicons", -- Iconos para archivos (opcional pero recomendado)
        "MunifTanjim/nui.nvim",       -- Framework UI para Neo-tree
    },
    
    -- Configuración del plugin
    config = function()
        -- Mapeo de teclas: Ctrl+n para abrir/cerrar el explorador
        vim.keymap.set('n', '<C-n>', ':Neotree filesystem reveal left<CR>', {})
        
        -- Configuración adicional recomendada (opcional):
        -- require("neo-tree").setup({
        --   close_if_last_window = true,  -- Cerrar Neo-tree si es la última ventana
        --   enable_git_status = true,     -- Mostrar estado git de los archivos
        --   enable_diagnostics = true,    -- Mostrar diagnósticos LSP
        -- })
    end
}
---------------------------------------------------------------------------------------------------

nano telescope.lua
---------------------------------------------------------------------------------------------------
return {
    -- Plugin principal de Telescope (búsqueda fuzzy)
    {
        'nvim-telescope/telescope.nvim', 
        tag = '0.1.8',  -- Versión específica del plugin (estable)
        dependencies = { 'nvim-lua/plenary.nvim' },  -- Biblioteca requerida
        
        config = function()
            local builtin = require("telescope.builtin")  -- Módulo con funciones predefinidas
            
            -- Mapeo de teclado: Ctrl+p para buscar archivos
            vim.keymap.set('n', '<C-p>', builtin.find_files, {})
            
            -- Configuración adicional recomendada (opcional):
            -- require("telescope").setup({
            --   defaults = {
            --     file_ignore_patterns = { "node_modules", ".git" }  -- Ignorar estos directorios
            --   }
            -- })
        end
    },

    -- Extensión para Telescope: Interfaz de selección mejorada
    {
        "nvim-telescope/telescope-ui-select.nvim",
        
        -- Configuración mínima para la extensión
        config = function()
            require("telescope").load_extension("ui-select")
            
            -- Personalización opcional:
            -- require("telescope").setup({
            --   extensions = {
            --     ["ui-select"] = {
            --       require("telescope.themes").get_dropdown()  -- Usar tema dropdown
            --     }
            --   }
            -- })
        end
    }
}
--------------------------------------------------------------------------------------------------
nano treesitter.lua
--------------------------------------------------------------------------------------------------
return {
    -- Plugin: Treesitter (sistema de parsing y resaltado mejorado)
    "nvim-treesitter/nvim-treesitter",
    
    -- Comando que se ejecuta al instalar/actualizar el plugin
    build = ":TSUpdate",  -- Actualiza todos los parsers instalados
    
    -- Configuración del plugin
    config = function()
        local configs = require("nvim-treesitter.configs")
        
        configs.setup({
            -- Lista de parsers a instalar automáticamente:
            ensure_installed = {
                "lua",         -- Soporte para Lua
                "c",           -- Soporte para C
                "javascript"   -- Soporte para JavaScript
                -- Puedes añadir más lenguajes: "python", "rust", etc.
            },
            
            -- Habilitar resaltado de sintaxis mejorado
            highlight = { 
                enable = true  -- Mejor que el resaltado nativo de Vim
            },
            
            -- Indentación automática basada en el árbol sintáctico
            indent = { 
                enable = true  -- Mejor indentación para bloques de código
            }
            
            -- Configuraciones opcionales:
            -- incremental_selection = { enable = true },  -- Selección incremental
            -- autotag = { enable = true }  -- Cierre automático de tags (HTML/JSX)
        })
    end
}
----------------------------------------------------------------------------------------------

nvim  //iniciar solo ese comando


LISTO
