
░░░░░██╗░█████╗░██╗░░░██╗░█████╗░
░░░░░██║██╔══██╗██║░░░██║██╔══██╗
░░░░░██║███████║╚██╗░██╔╝███████║
██╗░░██║██╔══██║░╚████╔╝░██╔══██║
╚█████╔╝██║░░██║░░╚██╔╝░░██║░░██║
░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝
___________________________________

--IMPRIMIR TEXTO EN CONSOLA
___________________________________

System.out.println("gitInitCV.");      // Imprime el texto con salto de línea al final
System.out.print("Hola mundo");        // Imprime el texto sin salto de línea
System.out.printf("Hola %s", nombre);  // Imprime texto con formato

___________________________________

--DECLARAR VARIABLES
___________________________________

// Primitivos
int edad = 25;               // Números enteros
double precio = 19.99;       // Números con decimales
char letra = 'A';            // Un solo carácter
boolean activo = true;       // Valor verdadero o falso

// Objetos wrapper (clases)
Integer edadObj = 25;
Double precioObj = 19.99;
Boolean activoObj = true;
Character letraObj = 'A';

// Diferencia: los tipos primitivos son más rápidos y ocupan menos memoria.
// Los wrappers permiten trabajar con colecciones (ArrayList, etc.) y usar métodos útiles.

String nombre = "Carlos";    // Cadena de texto (objeto)

___________________________________

--CONDICIONALES
___________________________________

if (edad >= 18) {
    System.out.println("Mayor de edad");
} else if (edad >= 13) {
    System.out.println("Adolescente");
} else {
    System.out.println("Menor de edad");
}

// SWITCH
int dia = 3;
switch (dia) {
    case 1:
        System.out.println("Lunes");
        break;
    case 2:
        System.out.println("Martes");
        break;
    default:
        System.out.println("Otro día");
}

___________________________________

--BUCLES (CICLOS)
___________________________________

// FOR
for (int i = 0; i < 5; i++) {
    System.out.println("i = " + i);
}

// WHILE
int j = 0;
while (j < 5) {
    System.out.println("j = " + j);
    j++;
}

// DO-WHILE
int k = 0;
do {
    System.out.println("k = " + k);
    k++;
} while (k < 5);

___________________________________

--FUNCIONES / MÉTODOS
___________________________________

// Método público que retorna entero
public static int sumar(int a, int b) {
    return a + b;
}

// Método público sin retorno
public static void saludar(String nombre) {
    System.out.println("Hola " + nombre);
}

// Método privado
private static void metodoPrivado() {
    System.out.println("Privado");
}

// Método protegido (visible en subclases)
protected void metodoProtegido() {
    System.out.println("Protegido");
}
___________________________________

--STREAMS Y MÉTODOS FUNCIONALES
___________________________________

import java.util.*;
import java.util.stream.*;

List<String> nombres = Arrays.asList("Ana", "Luis", "Carlos", "Maria");

// .stream(): convierte una colección a un flujo para operaciones funcionales
nombres.stream()
    .filter(n -> n.startsWith("C"))         // Filtra los nombres que empiezan con "C"
    .forEach(System.out::println);          // Imprime cada uno (Carlos)

// .map(): transforma los elementos del stream
List<Integer> longitudes = nombres.stream()
    .map(String::length)                    // Aplica .length() a cada nombre
    .collect(Collectors.toList());          // Recolecta los resultados en una lista

System.out.println(longitudes);             // [3, 4, 6, 5]

// .sorted(): ordena los elementos
nombres.stream()
    .sorted()                               // Orden alfabético
    .forEach(System.out::println);          // Ana, Carlos, Luis, Maria

// .collect(): recolecta los datos en una colección (List, Set, etc.)
List<String> filtrados = nombres.stream()
    .filter(n -> n.length() > 4)
    .collect(Collectors.toList());          // [Carlos, Maria]

// .reduce(): reduce el stream a un solo resultado (por ejemplo, sumar)
int suma = Arrays.asList(1, 2, 3, 4, 5).stream()
    .reduce(0, (a, b) -> a + b);            // Suma todos los elementos

System.out.println(suma);                   // 15

// Referencias a métodos (::)
nombres.forEach(System.out::println);       // Imprime cada nombre usando referencia directa

// También se puede usar con métodos personalizados
public class Util {
    public static boolean empiezaConM(String nombre) {
        return nombre.startsWith("M");
    }
}

List<String> conM = nombres.stream()
    .filter(Util::empiezaConM)
    .collect(Collectors.toList());          // [Maria]


___________________________________

--ARREGLOS
___________________________________

int[] numeros = {1, 2, 3, 4};
System.out.println(numeros[0]);  // Acceder al primer valor

for (int n : numeros) {
    System.out.println(n);       // Recorre todo el arreglo
}

int[] numeros = {1, 2, 3, 4};

// Acceso a elementos
System.out.println(numeros[0]);              // Primer elemento (1)
System.out.println(numeros[numeros.length-1]); // Último elemento (4)

// Recorrer arreglo
for (int n : numeros) {
    System.out.println(n);                  // Recorre todo el arreglo
}

// Modificar elemento
numeros[2] = 10;                            // Cambia el 3er valor a 10 (posición 2)

// "Eliminar" primer elemento (copiando a nuevo arreglo)
int[] sinPrimero = new int[numeros.length-1];
System.arraycopy(numeros, 1, sinPrimero, 0, numeros.length-1);

// "Eliminar" último elemento (copiando a nuevo arreglo)
int[] sinUltimo = new int[numeros.length-1];
System.arraycopy(numeros, 0, sinUltimo, 0, numeros.length-1);

// "Agregar" elemento (copiando a nuevo arreglo más grande)
int[] masElementos = new int[numeros.length+1];
System.arraycopy(numeros, 0, masElementos, 0, numeros.length);
masElementos[masElementos.length-1] = 5;    // Agrega 5 al final

// Buscar elemento por valor
int buscar = 3;
for(int i = 0; i < numeros.length; i++) {
    if(numeros[i] == buscar) {
        System.out.println("Encontrado en posición: " + i);
        break;
    }
}

// Convertir a String (representación)
System.out.println(Arrays.toString(numeros)); // [1, 2, 3, 4]

___________________________________

--LISTAS (ArrayList)
___________________________________

import java.util.ArrayList;
import java.util.List;

List<String> frutas = new ArrayList<>();
frutas.add("Manzana");
frutas.add("Banana");
frutas.add("Naranja");

// Operaciones básicas
frutas.add("Uva");                // Agrega al final
frutas.add(0, "Fresa");           // Agrega al inicio
frutas.remove(0);                 // Elimina el primero
frutas.remove("Banana");          // Elimina por valor
frutas.remove(frutas.size()-1);   // Elimina el último

// Acceso
String primera = frutas.get(0);   // Primer elemento
String ultima = frutas.get(frutas.size()-1); // Último elemento

// Búsqueda
int pos = frutas.indexOf("Naranja"); // Retorna posición
boolean existe = frutas.contains("Manzana"); // true/false

// Recorrido
for(String fruta : frutas) {
    System.out.println(fruta);
}

// Conversión a arreglo
String[] arrFrutas = frutas.toArray(new String[0]);

___________________________________

--ENTRADA POR TECLADO
___________________________________

import java.util.Scanner;

Scanner sc = new Scanner(System.in);
System.out.print("Ingrese su nombre: ");
String nombre = sc.nextLine();
System.out.println("Hola " + nombre);

___________________________________

--COMENTARIOS
___________________________________

// Comentario de una línea

/*
Comentario
de múltiples líneas
*/

/**
 * Comentario tipo documentación JavaDoc
 */


___________________________________

--MÉTODOS DE STRINGS
___________________________________

String texto = "Hola Mundo";

texto.length();               // Longitud de la cadena (cuenta la cantidad de caracteres)
texto.toLowerCase();          // Convierte a minúsculas, "hola mundo"
texto.toUpperCase();          // Convierte a mayúsculas, "HOLA MUNDO"
texto.charAt(0);              // Devuelve el carácter en la posición 0, 'H'
texto.substring(0, 4);        // Devuelve "Hola", extrae los caracteres desde la posición 0 hasta la 4 (sin incluir la posición 4)
texto.contains("Mundo");      // true, verifica si la cadena contiene la palabra "Mundo"
texto.startsWith("Hola");     // true, verifica si la cadena comienza con "Hola"
texto.endsWith("do");         // true, verifica si la cadena termina con "do"
texto.replace("Hola", "Hey"); // Cambia "Hola" por "Hey", resultado: "Hey Mundo"
texto.trim();                 // Elimina los espacios en blanco al inicio y al final de la cadena, por ejemplo, "   Hola Mundo  " -> "Hola Mundo"

// Comparación de strings
String a = "hola";
String b = "Hola";

a.equals(b);                  // false, compara las cadenas y distingue entre mayúsculas y minúsculas (la 'h' no es igual a la 'H')
a.equalsIgnoreCase(b);        // true, compara las cadenas sin distinguir entre mayúsculas y minúsculas

// Eliminar todos los espacios de una cadena
String sinEspacios = texto.replaceAll("\\s", "");  // Reemplaza todos los espacios (\\s) por una cadena vacía, "HolaMundo"

// Invertir una cadena
StringBuilder sb = new StringBuilder(texto);
String textoInvertido = sb.reverse().toString();   // Invierte la cadena "Hola Mundo" -> "odnuM aloH"

___________________________________

--STRINGBUILDER
___________________________________

StringBuilder sb = new StringBuilder();

sb.append("Hola ");
sb.append("Mundo");
System.out.println(sb.toString());   // "Hola Mundo"

sb.insert(5, "Java ");               // Inserta en una posición
sb.delete(5, 10);                    // Elimina caracteres del 5 al 9

// StringBuilder es más eficiente que usar + con String en bucles

___________________________________

--CLASES Y OBJETOS
___________________________________

public class Persona {
    String nombre;
    int edad;

    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    public void saludar() {
        System.out.println("Hola, soy " + nombre);
    }
}

// Crear objeto
Persona p = new Persona("Carlos", 30);
p.saludar();

___________________________________

--HERENCIA
___________________________________

public class Animal {
    public void sonido() {
        System.out.println("Hace un sonido");
    }
}

public class Perro extends Animal {
    @Override
    public void sonido() {
        System.out.println("Ladra");
    }
}

Perro miPerro = new Perro();
miPerro.sonido();   // "Ladra"

___________________________________

--INTERFACES
___________________________________

public interface Vehiculo {
    void arrancar();
}

public class Auto implements Vehiculo {
    public void arrancar() {
        System.out.println("Auto arrancando");
    }
}

Vehiculo v = new Auto();
v.arrancar();

___________________________________

--MANEJO DE EXCEPCIONES
___________________________________

try {
    int resultado = 10 / 0;
} catch (ArithmeticException e) {
    System.out.println("Error: " + e.getMessage());
} finally {
    System.out.println("Esto siempre se ejecuta");
}

___________________________________

--ARRAYLIST (COLECCIONES)
___________________________________

import java.util.ArrayList;
import java.util.List;

List<String> nombres = new ArrayList<>();
nombres.add("Ana");
nombres.add("Luis");
nombres.add("Carlos");

System.out.println(nombres.get(0));   // "Ana"
System.out.println(nombres.size());   // 3

for (String nombre : nombres) {
    System.out.println(nombre);
}

nombres.remove("Luis");               // Elimina por valor
nombres.clear();                      // Vacía la lista

___________________________________

--ENUMS
___________________________________

public enum Dia {
    LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO
}

// Usar un enum
Dia dia = Dia.LUNES;
System.out.println(dia);   // LUNES

// Métodos en enum
public enum Mes {
    ENERO(31), FEBRERO(28), MARZO(31);
    
    private int dias;
    
    Mes(int dias) {
        this.dias = dias;
    }
    
    public int getDias() {
        return dias;
    }
}

// Acceder a un valor enum
Mes enero = Mes.ENERO;
System.out.println(enero.getDias());  // 31

___________________________________

--MANEJO DE ARCHIVOS
___________________________________

import java.io.*;

public class Archivo {
    public static void main(String[] args) {
        try {
            // Escribir en archivo
            FileWriter fw = new FileWriter("miArchivo.txt");
            fw.write("Hola, este es un archivo de texto.");
            fw.close();
            
            // Leer de archivo
            FileReader fr = new FileReader("miArchivo.txt");
            BufferedReader br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                System.out.println(linea);
            }
            br.close();
        } catch (IOException e) {
            System.out.println("Error al manejar el archivo: " + e.getMessage());
        }
    }
}

___________________________________

--FECHAS Y HORAS
___________________________________

import java.time.*;

LocalDate fecha = LocalDate.now();    // Fecha actual (yyyy-mm-dd)
System.out.println(fecha);            // Ejemplo: 2025-04-05

LocalDate fechaFutura = fecha.plusDays(5);  // Sumar días
System.out.println(fechaFutura);           // Ejemplo: 2025-04-10

LocalDate fechaPasada = fecha.minusMonths(1);  // Restar meses
System.out.println(fechaPasada);              // Ejemplo: 2025-03-05

LocalTime hora = LocalTime.now();     // Hora actual
System.out.println(hora);             // Ejemplo: 14:30:15

LocalDateTime fechaYHora = LocalDateTime.now();  // Fecha y hora
System.out.println(fechaYHora);              // Ejemplo: 2025-04-05T14:30:15

___________________________________

--EXPRESIONES LAMBDA
___________________________________

import java.util.*;
import java.util.function.*;

List<String> nombres = Arrays.asList("Ana", "Luis", "Carlos", "Maria");

nombres.forEach(nombre -> System.out.println(nombre));  // Imprimir todos

// Usar lambda en una interfaz funcional (Runnable)
Runnable tarea = () -> System.out.println("Ejecutando tarea");
new Thread(tarea).start();  // Inicia un hilo con la tarea

// Ordenar usando lambdas
Collections.sort(nombres, (a, b) -> a.compareTo(b));  // Ordena en orden alfabético
System.out.println(nombres);  // [Ana, Carlos, Luis, Maria]

// Uso de Predicate, Function, y Consumer
Predicate<String> esMayorDeEdad = s -> s.length() > 5;
System.out.println(esMayorDeEdad.test("Carlos"));  // true

Function<String, Integer> longitud = s -> s.length();
System.out.println(longitud.apply("Carlos"));  // 6

Consumer<String> imprimir = s -> System.out.println(s);
nombres.forEach(imprimir);  // Imprime cada nombre de la lista

--------------------------------------------
--POO JAVA
--------------------------------------------
//Es un paradigma
Un paradignma es una manera de pensar o actuar, todo aquel modelo, patron o ejmplo que debe seguirse
en determinada situacion

>Paradigma Imperativa
es aquella que se dice que se debe hacer detallando lo que se va hacer paso por paso
POO es imperativa porque le decimos como debe hacer las cosas a trave's de objetos, clases, metodos etc.

>Paradigma Declarativa
En la programación declarativa (como SQL, HTML, o ciertos estilos de programación funcional), 
describes qué quieres que pase, no cómo.

En un sentido amplio, se refiere a una teoria o conjunto de terorias que sirve de modelo a seguir
para resolver problemas o situacion de determinadas que se planteen

//Paradigma Estructurado
codigo de arriba hacia abajo

//Paradigma Funcional
El paradigma funcional se basa en el uso de funciones puras, evita estado mutable y efectos secundarios

//Paradigma Reactiva
El paradigma reactivo se usa para observar y reaccionar a los cambios en flujos de datos continuos. 
Ejemplos incluyen chats en tiempo real, donde los mensajes se envían y reciben constantemente

//POO (Paradigma Orientado a Objetos)
El paradigma de programacion orientada a objetos es la implementacion de un paradigma de programacion

La POO se basa en la idea de un mundo lleno de objetos y que la resolucion de problemas se realiza mediante
el modelado/abstraccion de objetos de la vida real.

Los objetos pueden comunicarse entre si mediante mensajes.

//Caracteristcas 4 pilares
Se basa en el concepto de agrupar codigo y datos juntos dentro de una misma unidad llamada clase

1.Herencia
>Hay clases que comparten gran parte de sus caracteristicas
>Son conocidos como subclases

2.Polimorfismo
>POLI(muchas)MORFISMO(formas)

3.Encapsulamiento
>Encapsulamiento es el proceso de envolver los datos (atributos) y los métodos (funciones) en una 
única unidad (una clase) y restringir el acceso directo a algunos de los objetos de la clase.
Public, Private, Protected

4.Abstraccion
>Una clase abstracta es un tipo especial de clase que sirve como base para otras clases, 
permitiendo definir comportamientos comunes

5.UML


//CLASES
>Es una plantilla, o molde que permite construir objetos
>Representa "entidades" del mundo real
>Poseen atributos y metodos
>NO PUEDEN ser utilizadas directamente(sino mediante instancias a objetos)

//OBJETOS
>Un objeto es una instancia de una clase
>es la representacion de un objeto que generalmente existe en la vida real

//constructores
>Son funciones especiales que contienen las clases para permitir la creacion de objetos
>Pueden recibir datos/para'metros como no (construir vacio)
>Se llaman SIEMPRE igual que la clase
>NO RETORNA NINGU'N VALOR (ni siquiera VOID)
>GENERALMENTE SE UTILIZAN DOS TIPOS DE CONSTRUCTORES >Constructor vacio >constructor con todos los parametros

//Getter Y Setter
Get=Traer
Set=Colocar

//SOBRECARGA Y SOBRESCRITURA
>Sobre carga establece que dentro de una clase podemos tener 2 metodos que tengan exactamente el mismo nombre
pero diferente cantida o tipo de parametros que pueda recibir
CADA UNO DE ESTOS METODOS QUE TIENEN EL MISMO NOMBRE PERO DISTINTOS PARAMETROS SE CONCIDERAN SOBRECARGA DE METODOS ANTERIOR

>Sobreescritura permite que una subclase modifique o reemplaze el comportamiento de un método
heredado de la superclase
Es decir, aunque la subclase hereda el método de la superclase, puede ofrecer su propia versión del método 
con un comportamiento distinto.

//INTERFACES
>Son una coleccion de metodos abstractos con propiedades (atributos) CONSTANTES
>Una interfaz solamente puede extender o implementar otras interfaces (la cantidad que quiera)

>CUANDO HAY UNA ESPECIALIZACION Y VA MAS AL "QUE HACE" ALGO SE UTILIZA INTERFAZES
MIENTRAS QUE CUANDO ME INTERESA MAS "EL QUE ES" que "EL QUE HACE" UTILIZO CLASES ABSTRACTAS


//FIFO (El primer elemento en entrar es el primer elemento en salir.)
//LIFO (El último elemento en entrar es el primero en salir.)

------------------------
---COLLECTIONS
------------------------
>LISTS(LISTAS)
>Las listas son un conjunto de elementos relacionados entre si que tiene un determinado orden.
>Su tamanio es dina'mico (puede cambiar en el tiempo)
>Existen diferentes tipos de Listas: ArrayLists, LinkedLists, Stack

//ArrayLists	FIFO
Es una clase que se representa como una matriz dinamica que permite almacenar elementos
Hereda de la clase AbstractList, la cual implementa la interfaz List.
Permite colecciones o elementos duplicados.
El orden de los registros es el orden en el que fueron insertados.
Permite acceso aleatorio(Tiene I'ndice) / Manipulacion lenta (recorrer toodo el arraylist para hacer un cambio)
Ejemplo:
List<Persona> lista = new ArrayList<Persona>();
lista.add(new Persona(1,"Luicina",30))

//LinkedLists	FIFO y LIFO
Es una clase
Representan a una lista doblemente enlazada(ida y vuelta)
Permite duplicados
Mantiene el orden de insercio'n
Manipulacion m'as r'apida
Puese ser usada no solo como lista, sino tambien como pila o como cola.
Ejemplo:
List<Persona> lista = new LinkedList<Persona>();
lista.add(new Persona(1,"Lusina", 30));
lista.add(0, new Persona(5, "alinicio", 90)) 	//se va al inicio

//STACKS(Pilas) LIFO
Representan a objetos arriba de otros
Ejemplo:
Stack<Integer> pila = new Stack<Integer>();
System.out.println("Pila " + pila)			//muestra los elementos
System.out.println("Esta vacia?" + pila.isEmpty())	//isEmpty() == true o false
pila.push(1)						//agrega
pila.pop()						//elimina el ultimo que entro
pila.search(3)						//busca elemento 3
pila.peek()						//saber cual fue el ultimo que se agrego

//MAP
>Un Map es una coleccion de pares clave-valor donde cada clave esta asociada a un unico valor.
>Map en no puede contener claves duplicadas.
>Java proporciona diferentes implementaciones de Map:
HashMap, TreeMap, LinkedHashMap....

*put(C clave, V valor): Agregar un par clave-valor a la collection Map.
*get(Object clave): Devuelve el valor asociado a la clave brindanda o null si la clave no existe
*containsKey(Object clave): Verifica si el Map contiene el valor especificado
*remove(Object clave): Elimina el registro asociado a la clave brindada
*keySet(): Devuelve un conjunto de todas las claves en el Map
*values(): Devuelve una coleccion de todos los valores que contiene el Map
EJEMPLO:
Map<Integer, String> mapEmployee = new HashMap<>();
mapEmployee.put(10, "pachorez")
boolean mapEmployee.containsValue("OTRA COSA")		//false
boolean mapEmployee.containsKey(10)			//true

String name = mapEmployee.get(10,);
System.out.println("El empleado buscado es: "+ name) 	//pachorez

mapEmployee.remove(10)					//Elimina

---------------------------------
--Excepciones
---------------------------------
Excepciones Personalizadas
Para poder construir excepciones propieas, hay que tener en cuenta los siguientes bloques:
>try: Bloque donde puede ocurrir la excepcion
>catch: Es como el "else" del try (se ejecuta al dispararse una excepcion en el bloque try)
>finally: Bloque de c'odigo que se ejecuta siempre (sin importar si hubieron errores o no)
>throw: Lanzar una excepcion cualquiera				//en spanish arrojar
>throws: Determinar qu'e excepciones puede lanzar un me'todo	//arroja

----------------------------------
--ENUMS
----------------------------------
Es una palabra clave utilizada para definir un tipo de dato especial que representa'
un conjunto fijo de constantes.
estas constantes con valores predefinidos que representan elementos distintos de un conjunto
Metodos:
>name(): Devuelve un String con el nombre de la constante
>ordinal(): Devuelve un entero con la posicion del enum segu'n esta' declarada.
>values(): Devuelve un array que contiene todos los elementos del enum
>valuesOf(String name): Se utiliza para obtner la constante del enum cuyo nombre coincide con la cadena
			proporcionada.

----------------------------------
--THREADS(HILOS)
----------------------------------
>Concurrencia
Se refiere a las capacidad de un sistema o programa para realizar mu'ltiples tareas al mismo tiempo,
de manera aprentemente simulta'nea.
En programacion implica que m'ultiples hilos de ejecucion o procesos esta'n en funcionamiento
al mismo tiempo y realizando sus tareas de manera independiente o concurrente

>Hilos(Threads)
Es una unidad ba'sica de ejecucion que permite que un programa realice' multiples tareas de manera concurrente.
Los hilos Permiten la ejecucion de varias partes de un programa al mismo tiempo en forma de subprocesos sin que
uno interfiera con otro.

--------------------------------
--Casting 
--------------------------------
Es un metodo que nos permite tratar a un valor como si fuera de otro tipo
double porcAprobados;
int total = 50;
int aprobados = 25;

porcAprobados = ((double) aprobados/total) * 100; // Usando casting

------------------------------
--Genericos
------------------------------

