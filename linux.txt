██╗     ██╗███╗   ██╗██╗   ██╗██╗  ██╗
██║     ██║████╗  ██║██║   ██║╚██╗██╔╝
██║     ██║██╔██╗ ██║██║   ██║ ╚███╔╝ 
██║     ██║██║╚██╗██║██║   ██║ ██╔██╗ 
███████╗██║██║ ╚████║╚██████╔╝██╔╝ ██╗
╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝                                      
██████╗░███████╗██████╗░
██╔══██╗██╔════╝██╔══██╗
██║░░██║█████╗░░██████╦╝
██║░░██║██╔══╝░░██╔══██╗
██████╔╝███████╗██████╦╝
╚═════╝░╚══════╝╚═════╝░


-----------------
--partition disk
500gb FREE SPACE -select



// Raíz del sistema
/                        // raíz de todo el sistema de archivos

/bin                     // binarios esenciales (comandos básicos)
   ├── bash      // intérprete de comandos
   ├── ls        // listar archivos
   ├── cp        // copiar archivos
   ├── mv        // mover/renombrar
   ├── rm        // borrar
   ├── mkdir     // crear carpetas
   ├── rmdir     // borrar carpetas vacías
   ├── cat       // mostrar contenido de archivos
   ├── echo      // imprimir texto
   ├── pwd       // mostrar directorio actual

/boot                   // archivos de arranque
   ├── grub/    // configuración del gestor de arranque
   └── vmlinuz  // kernel de Linux

/dev                    // dispositivos representados como archivos
   ├── sda      // primer disco duro
   ├── sda1     // primera partición del disco
   ├── null     // “agujero negro” (descartar datos)
   ├── tty      // terminales virtuales

/etc                    // configuración del sistema
   ├── passwd   // lista de usuarios
   ├── shadow   // contraseñas encriptadas
   ├── group    // grupos de usuarios
   ├── hosts    // tabla de hosts locales
   ├── ssh/     // config del servidor SSH
   └── fstab    // tabla de sistemas de archivos

/home                   // directorios personales de usuarios
   ├── juan/    // carpeta personal de usuario juan
   ├── maria/   // carpeta personal de usuario maria

/lib y /lib64            // librerías compartidas
   └── *.so     // librerías usadas por binarios de /bin y /sbin

/media                   // montaje automático de dispositivos
   └── usb/     // ejemplo: pendrive montado

/mnt                     // montaje manual de discos
   └── disco/   // ejemplo: punto de montaje temporal

/opt                     // software opcional de terceros
   └── app/     // ejemplo: programas instalados manualmente

/proc                    // sistema virtual (info de kernel y procesos)
   ├── cpuinfo  // info de CPU
   ├── meminfo  // info de memoria
   └── [PID]/   // carpetas por proceso (ej: /proc/1234)

/root                    // carpeta personal del superusuario root

/run                     // info temporal de procesos y servicios
   ├── sshd.pid // PID del servidor SSH
   └── systemd/ // datos en ejecución del sistema

/sbin                    // binarios de administración del sistema
   ├── reboot   // reiniciar
   ├── shutdown // apagar
   ├── fdisk    // particionar discos
   ├── ifconfig // configurar red (antiguo)
   ├── ip       // comandos de red modernos
   └── iptables // configurar firewall

/srv                     // datos de servicios
   └── www/     // archivos servidos por un servidor web

/sys                     // info de dispositivos y kernel
   └── devices/ // info de hardware conectado

/tmp                     // archivos temporales (se borran al reiniciar)
   └── tmpfile   // ejemplo de archivo temporal

/usr                     // programas y utilidades de usuario
   ├── bin/     // binarios no esenciales (ej: nano, git, python)
   ├── sbin/    // binarios admin no esenciales
   ├── lib/     // librerías adicionales
   └── share/   // documentación, íconos, locales

/var                     // datos variables
   ├── log/     // registros del sistema (syslog, auth.log)
   ├── cache/   // cachés de aplicaciones
   ├── mail/    // correo local
   └── www/     // páginas web servidas

--------------
-historial de comandos de user

cat /home/namedelusuario/.bash_history

--------------------
-- change pass root
sudo nano /etc/ssh/sshd_config

PermitRootLogin yes				//descomentar y ponerle yes
PasswordAuthentication yes		// lo mismo

sudo systemctl restart ssh		//save and resert
sudo passwd root				//set passwd

---------------------------------
--PONER MI USUARIO DEV COMO SUDO

entrar en modo root con su

sudo visudo		//Esto abrirá el archivo /etc/sudoers
-agregar en 
Defaults	env_reset,'pwfeedback'	//pone asterisco al input
-y abajo de roor
dev	ALL=(ALL:ALL) ALL

--En tal caso no tengo contra para root lo agrego
sudo passwd root

------------
--add user

sudo adduser miuser

sudo usermod -aG sudo miuser	//para dar privilegios sudo


cat /etc/passwd		//ver los usuarios de la maquina

last	//ver ultimo acceso de los usuarios

-----------------
--CONFIG GRUB

sudo nano /etc/default/grub

GRUB_TIMEOUT=5		//muestra menu grub 5s antes de arrancar automatic
sudo update-grub	//para generar los cambios

--------------------------------------
--AGREGAR MI USUARIO A USUARIO SUDO


sudo apt update		//no dara porque no somos usuario sudo

groups			//no dira a que grupo pertenecemos y si no hay uno
			que diga sudo es porque no somos sudo

su -			//con esto seremos sudo y ponemos la contra root
usermod -aG sudo heimdall //con esto agrego mi usuario al grupo sudo

exit		//para salir de la sesion root

reboot		//para actualizar los cambios

-----------------
--PONER INGLES

sudo locale-gen

sudo dpkg-reconfigure locales

nano /etc/locale.gen
                                
----------------
--CREAR CARPETA

mkdir name-carpeta        con comillas es para poner nombre con espacio
mkdir "name carpeta"	

mkdir /ruta/a/la/carpeta/nombre-carpeta  //Crear una carpeta en una ubicacion
					 especifica
					 
mkdir carpeta1 carpeta2 carpeta3	//crear varias carpetas

mkdir -p padre/hijo/nieto	//crear una estructura de directorios

------------------
--CREAR ARCHIVO

touch nombre_archivo.js		//con comillas para nombre separado
touch "nombre archivo.txt"

echo "" > nombre_archivo.txt	//crear con algo o vacio el archivo
echo "primer texto" > nombre_archivo.txt
> nombre_archivo.txt	//solo crear el archivo

-----------------
LEER ARCHIVO
----------------

nano nombre_archivo.txt
nano "nombre archivo.txt"	//nano es un editor de texto sencillo

vi nombre_archivo.txt	//son editores mas avanzados
vim nombre_archiv.txt

gedit nombre_archiv.txt  //edit texto de escritorio

ELIMINAR CARPETA
rmdir nombre_carpeta	//elimina solo la carpeta

rm -r nombre_carpeta	//elimina con todo el contenido que tenga

rm -rf nombre_carpeta	//elimina sin preguntas estas seguro

---------------------
--ELIMINAR ARCHIVO
--------------------
rm archivo.txt
rm -r carpeta		//eliminia la carpeta con todo lo que tenga dentro PERO si hay pedirá confirmación solo si hay archivos protegidos contra escritura
rm -rf carpeta		//eliminara todo sin preguntarte
rm -ri carpeta		//pregunta siempre cuando elimina

rm /ruta/del/archivo/archivo.txt

ACTUALIZAR ARCHIVO Y CARPETA

mv "nombre_archivo.txt" "new archivo.txt"

mv "nombre_carpeta" "new carpeta"

------------------------
ELIMINAR ALGO INSTALADO
------------------------
sudo apt remove --purge nombreinstalado		//remove(elimina el paquete)  --purge(elimina los archivos creados)
sudo apt autoremove			//Esto elimina librerías que se instalaron con picom y ya no se usan.

---------------------------
--MOVER ARCHIVO Y CARPETA

mv archivo.txt /ruta/a/directorio/nuevo/

mv -r carpeta /ruta/a/directorio/nuevo/		///mover una carpeta y todo su 
						contenido

mv -r proyectos ~/Desktop/	///moverla a tu directorio personal
	///////////////////////////////
cp archivo.txt ~/Documents/directorio/pegaraqui/    	//para copiar un archivo a otro
cp -r carpeta ~/Documents/directorio/pegaraqui/    	//para copiar una carpeta con todo dentro que tenga a otro

-------------------
--LEER UN ARCHIVO

cat nombre_archivo.txt	//El comando cat muestra el contenido completo de
			 un archivo

less nombre_archivo.txt	//Permite ver el contenido pagina por pagina y 
			navegar con las teclas de flecha

-------------------------------------
--EXTRAER UN ARCHIVO ZIP   U N Z I P

sudo apt update
sudo apt install unzip

unzip archivo.zip	//extraer archivo

unzip archivo.zip -d /ruta/al/directorio_destino

unzip -o archiv.zip	//si hay archivos similares con -o lo reemplaza
			sin preguntar


---------------
--MYSQL


mysql -u root -p	//abrir mysql server

mariadb -u root -p      //si es mariadb

---------------------------
--INSTALL .DEB

sudo apt install ./archivo.deb		//mejor que los dos de abajo porque descara las dependencias que falte

sudo dpkg -i archivo-descargar.deb	//instalar el archivo

sudo apt-get install -f		//resolver dependencias faltantes

---------------------------
--INSTALAR PROGRAMA .tar.gz

cd Downloads
sudo tar -xzf postman-linux-x64.tar.gz		//Creara una carpeta postman
mv Postman postman		//poner nombre corto y en minuscula
sudo mv postman /opt/	//mover a opt (como aplicacion del sistema)

sudo nano /usr/share/applications/postman.desktop		//crear acceso directo .desktop
---------------------------------------------------------------------------------------
[Desktop Entry]
Name=Postman
Exec=/opt/postman/Postman
Icon=/opt/postman/app/resources/app/assets/icon.png
Type=Application
Categories=Development;
Terminal=false
---------------------------------------------------------------------------------------

------------------
--SSH

//GENEREAMOS CLAVE PARA GITHUB(EXAMPLE)
ssh-keygen -t ed25519 -C "arch-github" -f ~/.ssh/id_ed25519_github 

*ssh-keygen: programa que genera pares de claves SSH(privada + publica)
	*-t: 		tipo de clave
	*ed25519: 	algoritmo moderno de criptografica de curva elíptica mas seguro y rapido que RSA
	*-C: 		comentario que se guarda al final de la calve publica

--ponemos el passphrase(contrasena de la clave)
--si la dejamos vacia nos pedira la contra cada ves que usemos GIT

//CREAMOS UN SSH-AGENT(para que recuerde la contra que pusimos)
-si no hay agente lo arrancamos manualmente
eval "$(ssh-agent -s)"
	*eval: los ejecuta como comandos en tu shell

ssh-add ~/.ssh/id_ed25519_github
	*agregamos y ponemos la contra

ssh=add -l
	*ssh-add: es una utilidad para gestionar las claves SSH cargadas en el SSH-AGENT
	* -l: lista
	//eso haremos cada ves que se reinicie la pc porque lo guarda en ram y si no queremos repetir eso
	  lo almacenamos en un KEYRING

cat ~/.ssh/id_ed25519_github.pub
	//esto lo pegamos en GITHUB SSH and GPG keys

//PROBAR LA CONEXION
ssh -T git@github.com
	* -T: no abrir un shell interactivo ya que GITHUB no ofrece un sheel nomral por SSH
		  solo a GIT(push, pull, clone)
///////////////////////////
VERIFICAMOS SI TENEMOS LA CLAVE SSH
ls -al ~/.ssh

//////////////////////////
INICIA EL AGENTE Y SSH Y ANIADE LA CLAVE
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

